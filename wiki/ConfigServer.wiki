#summary Sentencias de configuración del servidor

= Cómo configurar un servidor para usar SiMaPe =

Esta guía indica paso a paso cómo debe configurarse un servidor, con opciones por defecto, para instalar y desarrollar este sistema.  Sirve para cualquier distro *Debian*/derivados.
Todas las opciones pueden modificarse a gusto.

03/11/2014: actualizado para MySQL 5.6

31/10/2014: actualizado para PHP 5.6

= Script =
El siguiente script se encarga de configurar el servidor en un solo paso, instalando dependencias y demás.  Si colocan todos los archivos necesarios dentro del directorio _svr`_`conf_ en el mismo lugar donde se encuentra este script, el mismo copiará toda la configuración pertinente.  La distribución de este directorio debe ser igual a la de _/etc_.

Los únicos requisitos son:
 * sudo
 * distro Debian-like

Si no se cuenta con `sudo`, simplemente borrar sus apariciones en el script y ejecutarlo como root.

Pueden encontrar un ejemplo [http://www.simape.cf/usr/content/upload/server_config.tar.gz aquí] de toda la configuración por defecto del proyecto.  Pero atento, ¡podría estar desactualizada!  Es preferible leer esta página detenidamente.

{{{
#!/bin/bash
# Script para instalar SiMaPe
#
function get_scriptpath {
	# Devuelte la ruta al script de forma certera
	# Uso: ruta=`get_scriptpath` o bien ruta=$( get_scriptpath )
	# Fuente: http://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
	pushd "`dirname "$0"`" > /dev/null
	echo "`pwd -P`"
	popd > /dev/null
}

CURDIR=$( get_scriptpath )

# Usuario que se encarga de mantener el directorio web
USER="usuario"
###

echo "SiMaPe pre requisitos"
echo
echo "Paquetes.."
echo "MySQL 5.6"
echo "Apache 2"
echo "PHP 5.6"
echo "ssmtp"
echo "Configuraciones...."
echo
sudo bash -c 'echo -e "deb http://packages.dotdeb.org wheezy-php55 all\n#deb-src http://packages.dotdeb.org wheezy-php55 all" > /etc/apt/sources.list.d/dotdeb-php5.list'
wget http://www.dotdeb.org/dotdeb.gpg
sudo apt-key add dotdeb.gpg
rm dotdeb.gpg
sudo bash -c 'echo -e "# deb cdrom:[Debian GNU/Linux 7.2.0 _Wheezy_ - Official i386 NETINST Binary-1 20131012-12:55]/ wheezy main\n#deb cdrom:[Debian GNU/Linux 7.2.0 _Wheezy_ - Official i386 NETINST Binary-1 20131012-12:55]/ wheezy main\n\ndeb http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy main contrib\n#deb-src http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy main\n\ndeb http://security.debian.org/ wheezy/updates main contrib\n#deb-src http://security.debian.org/ wheezy/updates main\n\n# wheezy-updates, previously known as volatile\ndeb http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy-updates main contrib\n#deb-src http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy-updates main\n" > /etc/apt/sources.list'
sudo apt-get remove --purge mysql-server* mysql-client* mysql-server-core*

#get Oracle keys and set repo
gpg --keyserver hkp://pgp.mit.edu --recv-keys 0x8c718d3b5072e1f5
gpg --export --armor 0x8c718d3b5072e1f5 | sudo apt-key add -
sudo bash -c 'echo -e "deb http://repo.mysql.com/apt/debian/ wheezy mysql-5.6\n#deb-src http://repo.mysql.com/apt/debian/ wheezy mysql-5.6" > /etc/apt/sources.list.d/mysql.list'

sudo apt-get update && sudo apt-get upgrade
sudo apt-get install mysql-server mysql-client apache2 php5 php-pear php5-mysqlnd php5-mcrypt php5-curl php5-mhash libapache2-mod-php5 php5-cli php5-common apache2-mpm-prefork ssmtp php5-gd
echo
echo "*** IMPORTANTE: verificar que el paquete apache2-mpm-prefork se encuentra instalado, y al mismo tiempo el paquete apache2-mpm-worker no esté."
dpkg --get-selections | grep apache2-mpm
echo
echo "Presione una tecla para continuar"
read -n 1
echo
echo "Crear carpeta de log"
sudo mkdir /var/log/simape
sudo touch /var/log/simape/SiMaPe-DB.log
sudo chmod 0640 /var/log/simape
sudo chmod 0600 /var/log/simape/SiMaPe-DB.log
sudo chown -R mysql:adm /var/log/simape
echo
echo "Crear carpeta del sitio"
sudo mkdir /var/www/simape
sudo chmod 0775 /var/www/simape
sudo chown www-data:www-data /var/www/simape
sudo rm /var/www/index.html
sudo adduser ${USER} www-data    # para poder escribir sin sudo
echo
echo "Habilitar PHP5 en apache"
sudo a2enmod php5
echo
echo "Configurar PHP"
echo "Edite el archivo ${CURDIR}/svr_conf/php5/mods-available/simape.ini segun lo necesite, y presione una tecla para continuar"
read -n 1
sudo cp -L ${CURDIR}/svr_conf/php5/mods-available/* /etc/php5/mods-available/
cd /etc/php5/apache2/conf.d
sudo php5enmod simape
sudo mkdir /var/lib/php5/sessions
sudo mkdir /var/lib/php5/upload_tmp
sudo chmod 733 /var/lib/php5/sessions
sudo chmod 733 /var/lib/php5/upload_tmp
sudo chmod o+t /var/lib/php5/sessions
sudo chmod o+t /var/lib/php5/upload_tmp
echo
echo "Configurar apache"
echo "ATENCION: Debe colocar los certificados SSL en ${CURDIR}/svr_conf/ssl/localcerts o bien directamente en /etc/ssl/localcerts"
echo "Los archivos son: simape-ca.crt, simape-svr.key y simape-svr.crt"
echo "Donde el primero es el certificado de la autoridad de certificacion (CA), el segundo es la llave del servidor y el tercero, el certificado del servidor generado con su llave y firmado por la CA."
echo "Si los nombres fuesen distintos, editar acorde /etc/apache2/sites-available/simape_ssl"
echo "Si no cuenta con estos certificados aun, o no usara SSL, elimine ${CURDIR}/svr_conf/apache2/sites-available/simape_ssl"
echo
echo "Presione una tecla para continuar"
read -n 1
echo
sudo cp -L ${CURDIR}/svr_conf/apache2/sites-available /etc/apache2/sites-available
cd /etc/apache2/sites-enabled
sudo rm -f /etc/apache2/sites-enabled/*
#sudo ln -s ../sites-available/simape ./001-simape
#sudo ln -s ../sites-available/simape_ssl ./002-simape_ssl
sudo a2dissite default
sudo a2ensite simape
sudo a2ensite simape_ssl
sudo a2enmod headers
sudo a2enmod ssl
sudo a2enmod rewrite
echo
echo "ssmtp"
sudo cp ../svr_conf/ssmtp /etc/
sudo chown root:mail /etc/ssmtp/ssmtp.conf
sudo chmod 0640 /etc/ssmtp/ssmtp.conf
sudo adduser ${USER} mail
sudo adduser www-data mail
echo
echo "Reiniciar Apache"
sudo service apache2 restart
echo
# REMOVIDO PARA PHP > 5.6
#echo "Cron sessions-cleaner"
#sudo cp -L ${CURDIR}/svr_conf/cond.d/php5 /etc/cron.d
#sudo chmod +x /etc/cron.d/php5
#echo
echo "Crear pagina web de prueba"
sudo bash -c 'echo -e "<?php\nphpinfo();\n?>" > /var/www/simape/test.php'
sudo chmod 0644 /var/www/simape/test.php
cd /var/www
sudo chown -R www-data:www-data ./simape/
echo "*** Probar funcionamiento: http://localhost/test.php y https://localhost/test.php"
echo
echo "DEBE CERRAR SU SESION DE USUARIO Y VOLVERLA A INICIAR"
echo "*FIN*"
}}}

= Configuraciones individuales =
A continuación se detallarán las configuraciones individuales de cada módulo, indicando en *negrita* la ruta del archivo de configuración, y en _cursiva_ el nombre, que es optativo.  Claro que de cambiarlo, deben modificarse las configuraciones que a ellos apunten de manera pertinente.

== Instalación de dependencias ==

{{{
sudo apt-get install mysql-server mysql-client apache2 php5 php-pear php5-mysqlnd php5-mcrypt php5-curl php5-mhash libapache2-mod-php5 php5-cli php5-common apache2-mpm-prefork ssmtp php5-gd
}}}
Puede que no tenga éstas en los repositorios por defecto.  Yo lo he instalado en Debian 6 y 7 y para ello agregué los siguientes:
{{{
sudo bash -c 'echo -e "deb http://packages.dotdeb.org wheezy-php55 all\n#deb-src http://packages.dotdeb.org wheezy-php55 all" > /etc/apt/sources.list.d/dotdeb-php5.list'
wget http://www.dotdeb.org/dotdeb.gpg
sudo apt-key add dotdeb.gpg
rm dotdeb.gpg
sudo bash -c 'echo -e "# deb cdrom:[Debian GNU/Linux 7.2.0 _Wheezy_ - Official i386 NETINST Binary-1 20131012-12:55]/ wheezy main\n#deb cdrom:[Debian GNU/Linux 7.2.0 _Wheezy_ - Official i386 NETINST Binary-1 20131012-12:55]/ wheezy main\n\ndeb http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy main contrib\n#deb-src http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy main\n\ndeb http://security.debian.org/ wheezy/updates main contrib\n#deb-src http://security.debian.org/ wheezy/updates main\n\n# wheezy-updates, previously known as volatile\ndeb http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy-updates main contrib\n#deb-src http://ftp.ccc.uba.ar/pub/linux/debian/debian/ wheezy-updates main\n" > /etc/apt/sources.list'
sudo apt-get update && sudo apt-get upgrade
}}}

== Apache ==
*/etc/apache2/conf.d*/_simape_

Deshabilitar mostrar errores y TRACE, fundamental para un servidor de producción:

{{{
ServerSignature Off
ServerTokens Prod
TraceEnable Off
}}}

*/etc/apache2/sites-available*/
Configuración por defecto del sitio:

_simape_
{{{
<VirtualHost *:80>
	ServerAdmin webmaster@localhost

	DocumentRoot /var/www/simape
	<Directory />
		Options FollowSymLinks -Indexes
		AllowOverride All
	</Directory>
	<Directory /var/www/simape>
		Options -Indexes FollowSymLinks
		AllowOverride All
		Order allow,deny
		allow from all
	</Directory>

	ErrorLog /var/log/simape/apache_error.log

	# Possible values include: debug, info, notice, warn, error, crit,
	# alert, emerg.
	LogLevel warn

	CustomLog /var/log/simape/apache_access.log combined
</VirtualHost>
}}}

_simape`_`ssl_
{{{
LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so

Listen 443
<VirtualHost *:443>
    ServerName 5.224.0.250:443
    SSLEngine on

    SSLProtocol all -SSLv2 -TLSv1 -SSLv3

    #SSLUseStapling on
    #SSLStaplingResponderTimeout 5
    #SSLStaplingReturnResponderErrors off
    #SSLStaplingCache shmcb:/var/run/ocsp(128000)

    SSLCertificateFile /etc/ssl/localcerts/simape-svr.crt
    SSLCertificateKeyFile /etc/ssl/localcerts/simape-svr.key
    SSLCertificateChainFile /etc/ssl/localcerts/simape-ca.crt
    SSLCACertificateFile /etc/ssl/localcerts/simape-ca.crt

    SSLCipherSuite HIGH:!aNULL:!MD5:!eNULL:!LOW:!3DES:!EXP:!PSK:!SRP:!DSS:!RC4
    SSLHonorCipherOrder on

    SSLCompression off

    Header add Strict-Transport-Security "max-age=15768000"

    ServerAdmin webmaster@localhost

    DocumentRoot /var/www/simape
    <Directory />
		Options FollowSymLinks -Indexes
		AllowOverride All
    </Directory>
    <Directory /var/www/simape>
		Options -Indexes FollowSymLinks
		AllowOverride All
 		Order allow,deny
		allow from all
    </Directory>

    ErrorLog /var/log/simape/apache_error.log

     # Possible values include: debug, info, notice, warn, error, crit,
     # alert, emerg.
     LogLevel warn

     CustomLog /var/log/simape/apache_access.log combined
</VirtualHost>
}}}

Resulta importante destacar que por ser inseguros se han deshabilitado los protocolos SSL v2, SSL v3 y TLS v1 (SSL v1 ya viene deshabilitado).  Se recomienda mantener estos parámetros.
Actualización: resulta que me adelanté al [https://en.wikipedia.org/wiki/POODLE POODLE attack].

== PHP ==

*/etc/php5/mods-available*/_simape.ini_

Luego de haber creado este archivo, es necesario activarlo como módulo: `sudo php5enmod simape`

{{{
; configuracion de opciones para SiMaPe
; http://simape.cf
; https://code.google.com/p/simape
; priority=00

expose_php = 0
display_errors = 0
log_errors = 1
error_log=/var/log/simape/php_scripts_error.log
file_uploads = 1
upload_tmp_dir = "/var/lib/php5/upload_tmp"
max_file_uploads = 2

allow_url_fopen=Off

; Limites de memoria
memory_limit = 8M
post_max_size = 6M
upload_max_filesize = 5M

; En segundos
max_execution_time =  30
max_input_time = 30

; Deshabilitar funciones peligrosas
disable_functions = allow_url_fopen,exec,passthru,shell_exec,system,proc_open,popen,curl_multi_exec,parse_ini_file,show_source

; Limitar acceso al sistema
open_basedir="/var/www/simape/"

; Configuracion de session
session.use_strict_mode = 1
session.save_path = "/var/lib/php5/sessions"
session.cookie_httponly = 1
session.name = SIMAPESESS
session.hash_function = sha256
session.hash_bits_per_character = 5
session.entropy_length = 256
session.entropy_file = /dev/urandom
session.gc_maxlifetime = 1800
session.use_cookies = 1
session.use_only_cookies = 1
session.use_trans_sid = 0

default_charset = "UTF-8"

sendmail_path = /usr/sbin/ssmtp -t
}}}

*/etc/cron.daily*/_simape-cleaner_

Limpiar archivos temporales de simape:

{{{
#!/bin/bash
# Borra los archivos temporales

declare -r TEMPDIR="/var/www/simape/tmp"
declare -i TODAY=$( date +%s --date="`date +'%Y-%m-%d'`" )


cd ${TEMPDIR}
for TEMPFILE in $( ls ); do
    FILEMODTIME=`stat -c "%Y" ${TEMPFILE}`
    if [ ${FILEMODTIME} -lt ${TODAY} ]
    then
        #echo "Borrando ${TEMPFILE}..."
        rm -f ${TEMPFILE}
    fi
done
}}}

== Iptables ==

*/etc/network/if-post-down.d*/_iptables-save_

Salvar config de IPtables:

{{{
#!/bin/sh
iptables-save -c > /etc/iptables.rules
if [ -f /etc/iptables.downrules ]; then
   iptables-restore < /etc/iptables.downrules
fi
exit 0
}}}

*/etc/network/if-pre-up.d*/_iptables-restore_

Recuperar config de IPtables:

{{{
#!/bin/sh
iptables-restore < /etc/iptables.rules
exit $?
}}}

= Incrementando la seguridad del servidor y la app =

== IP Tables ==

Config de IPtables:

*/etc/iptables.rules*

{{{
# Generated by iptables-save v1.4.14 on Sun Dec  1 13:05:44 2013
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [36:5040]
[0:0] -A INPUT -i lo -j ACCEPT
[378:32152] -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
[0:0] -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
[0:0] -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
[0:0] -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
[1:28] -A INPUT -j DROP
COMMIT
# Completed on Sun Dec  1 13:05:44 2013
}}}

== SSL ==

Activar SSL en Apache y SiMaPe es fundamental para la seguridad de la misma.  Se pueden adquirir certificados firmados por una CA, pero si no se puede ésto, al menos se deben generar certificados autofirmados e instalarlos en el servidor y en las computadoras cliente (para evitar la advertencia de los navegadores con *Este sitio no es seguro*).

Los certificados pueden ir en /etc/ssl/localcerts y luego basta con activarlo en Apache: `sudo a2ensite simape_ssl` y en la aplicación editar _etc/config.php_ y poner a *TRUE* la constante *SMP_SSL*.

Claro que pueden almacenarse en otra parte y editar acorde _/etc/apache2/sites-available/simape_ssl_.

Pueden solicitarnos generar un certificado firmado por nosotros para emplear en su servidor, enviar email a *[https://www.google.com/recaptcha/mailhide/d?k=01WbHw5omysGmLm-bRDJ-Pdg==&c=n8rpi9AizpMrjkmnGlATwZSBjMZgz_QeyHEz1zZYfHE= sima...@googlegroups.com]* (click para ver la dirección)

Esta guía explica muy bien cómo generar los certificados: http://www.vanemery.com/Linux/Apache/apache-SSL.html

Cabe destacar que la guía es algo antigua y los parámetros de seguridad son muy precarios.  Hago un resumen de comandos más apropiados que recomiendo emplear:
{{{
# Generar certificado de entidad CA (solo debe hacerse una única vez)
openssl genrsa -aes256 -out my-ca.key 4096
openssl req -new -x509 -sha512 -days 3650 -key my-ca.key -out my-ca.crt

# Generar certificado para el servidor (debe repetirse por cada servidor)
openssl genrsa -aes256 -out simape-svr.key 1024
openssl req -new -sha512 -key simape-svr.key -out simape-svr.csr
# Firmar con certificado de CA
openssl x509 -req -sha512 -in simape-svr.csr -out simape-svr.crt -CA my-ca.crt -CAkey my-ca.key -CAcreateserial -days 730
}}}

Luego copiar los archivos simape-svr.key, simape-svr.crt y my-ca.crt a /etc/ssl/localcerts o donde se prefiera (debe editarse /etc/apache2/sites-available/simape_ssl acorde).  *Importante*: los archivos .crt deben ser legibles por todos y los .key solo por root: `sudo chmod 0400 *.key && sudo chmod 0444 *.crt` estando en el directorio apropiado.

¡¡Muy recomendable hacer un backup de todos los archivos recién generados, y sus respectivas contraseñas!!

*Atención*: Si al generar el certificado del servidor se ha empleado una contraseña, Apache2 no podrá iniciar automáticamente dado que se deberá escribir dicha contraseña (https://wiki.apache.org/httpd/RemoveSSLCertPassPhrase)

== Google Authenticator ==

Decidí implementar GAuth en mi servidor dado que añade un factor de seguridad fundamental, y es muy fácil de configurar (http://www.howtogeek.com/121650/how-to-secure-ssh-with-google-authenticators-two-factor-authentication/).

El siguiente script compila e instala GAuth, y lo habilita para las conexiones SSH y terminales locales:

{{{
#!/bin/bash

# *************************************************************************
# Script de instalacion y configuracion de Google Authenticator
# Autor: HacKan
# Licencia: GNU GPL v3
#
#  This is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# *************************************************************************

declare -r VERSION="0.3"

declare -i -r EXIT_SUCCESS=0
declare -i -r EXIT_FAILURE=1

# Parametros extras para la configuracion de PAM (p.e. nullok)
declare -r PAM_PARAMS=""

# Script de desinstalacion
declare -r UNINSTALL_SCRIPT="gauth_uninstall"

function err_msg {
	echo -e "\t!!! ${1}"
}

EVAL=${EXIT_FAILURE}

echo "*** Instalando dependencias..."
sudo apt-get -y install libpam0g-dev libqrencode3
if [ $? -eq 0 ]; then
	if [ -f libpam-google-authenticator*.tar.bz2 ]; then
		echo "*** Compilando fuente..."
		tar jvxf libpam-google-authenticator*.tar.bz2
		cd libpam-google-authenticator*
		make
		if [ $? -eq 0 ]; then
		    echo
			echo "*** Instalando modulo PAM..."
			sudo make install
			if [ $? -eq 0 ]; then
				sudo bash -c 'echo -e "\n\n# Google authenticator\nauth required pam_google_authenticator.so ${PAM_PARAMS}\n# --" >> /etc/pam.d/sshd'
				sudo bash -c 'echo -e "\n\n# Google authenticator\nauth required pam_google_authenticator.so ${PAM_PARAMS}\n# --" >> /etc/pam.d/login'
			    echo
				echo "*** Google Authenticator ha sido instalado correctamente.  Se habilito para SSH y LOGIN"
				echo "*** Debe configurarlo AHORA para su usuario, o no podra iniciar sesion nuevamente"
				echo
				google-authenticator
                if [ $? -eq 0 ]; then
                    echo
                    echo "*** Google Authenticator ha sido configurado correctamente para su usuario.  Debe ejecutar google-authenticator para cada usuario.  Aquellos usuarios no configurados, no podran iniciar sesion"
                    EVAL=${EXIT_SUCCESS}
                else
                    err_msg "Algo fallo en la configuracion de Google Authenticator.  Ejecute nuevamente google-authenticator.  Si no logra configurarlo, ejecute ${UNINSTALL_SCRIPT} de inmediato antes de salir de su sesion, para revertir todos los cambios.  De otra forma, no podra iniciar sesion nuevamente."
                fi
			else
				err_msg "No se ha podido instalar correctamente"
			fi
		else
			err_msg "No se ha podido compilar correctamente"
		fi
	else
		err_msg "No se encuentra el archivo fuente"
	fi
else
	err_msg "No se han podido instalar las dependencias necesarias"
fi

echo "*** Script finalizado ***"
exit ${EVAL}
}}}

*Atención*: los cambios tienen efecto INMEDIATO, por lo que debe configurarse google auth para todas las cuentas de usuario.  Las que no hayan sido configuradas, ¡no podrán loggearse!.

Basta con crear el script anterior en el mismo directorio donde se tiene la fuente de GAuth.  Pueden obtenerla desde el [https://code.google.com/p/google-authenticator/ repo oficial], en la sección [https://code.google.com/p/google-authenticator/downloads/list Downloads].

Para desinstalar GAuth, pueden emplear el siguiente script:
{{{
#!/bin/bash

# *************************************************************************
# Script de desinstalacion de Google Authenticator
# Autor: HacKan
# Licencia: GNU GPL v3
#
#  This is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# *************************************************************************

declare -r VERSION="0.2"

declare -i -r EXIT_SUCCESS=0
declare -i -r EXIT_FAILURE=1

function err_msg {
	echo -e "\t!!! ${1}"
}

EVAL=${EXIT_FAILURE}

echo "*** Buscando PAM pam_google_authenticator.so..."
PAM="`find /lib*/security /lib*/*/security -maxdepth 1 -name pam_google_authenticator.so -printf '%H' -quit`"
echo "*** Borrando ${PAM}/pam_google_authenticator.so..."
sudo rm -v ${PAM}/pam_google_authenticator.so
echo "*** Buscando aplicacion google-authenticator..."
APP="`which google-authenticator`"
echo "*** Borrando ${APP}..."
sudo rm -v ${APP}
echo "*** A continuacion se revertiran los cambios en /etc/pam.d/sshd y /etc/pam.d/login"
echo "Si ha realizado otras modificaciones en estos archivos, presione CTRL+C para salir ahora"
read -p "o cualquier tecla para continuar" -n 1
sleep 2
echo "*** Modificando la configuracion de /etc/pam.d/sshd..."
head -n -2 /etc/pam.d/sshd | sudo tee /etc/pam.d/sshd
echo "*** Modificando la configuracion de /etc/pam.d/login..."
head -n -2 /etc/pam.d/login | sudo tee /etc/pam.d/login
EVAL=${EXIT_SUCCESS}

echo "*** Finalizado"
exit ${EVAL}
}}}